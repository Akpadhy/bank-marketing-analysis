skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
testit()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
library(car)
?vif
testit()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
testit()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
testit()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
pack_course()
?mutate
library(dlpyr)
library(dplyr)
?mutate
library(swirl)
install_course()
swirl("Decision Trees")
bye()
?attr
jjhfwjhf
library(swirl)
install_course()
swirl("Decision Trees")
skip()
skip()
skip()
str(bank_train)
skip()
skip()
play()
?rpart.control
nxt()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
library(swirlify)
set_lesson()
pack_course()
library(swirl)
install_course()
swirl("PGDDA Statistics - Descriptive")
8
library(titanic)
str(titanic_train)
t()
nxt()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
xt()
nxt()
swirl()
3
skip()
skip()
unique(day)
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
str(iris)
str(iris, echo = F)
str(iris, echo = F)
setwd("C:/Users/Pratika/Desktop/BFSI/email_course_bank_marketing")
bank_data <- read.csv("bank-marketing.csv")
str(bank_data)
library(ggplot2)
library(caret)
library(caTools)
bank_data$response <- as.integer(bank_data$response)
bank_data <- dummy.data.frame(bank_data)
bank_data$response <- as.factor(bank_data$response)
library(dummies)
bank_data <- dummy.data.frame(bank_data)
bank_data$response <- as.factor(bank_data$response)
# splitting into train and test data
set.seed(1)
split_indices <- sample.split(bank_data$response, SplitRatio = 0.70)
bank_data$response <- as.integer(bank_data$response)
str(bank_data)
bank_data <- read.csv("bank-marketing.csv")
str(bank_data)
library(ggplot2)
bank_data$buckets.age <- cut(bank_data$age, breaks = c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100))
str(bank_data)
sum(is.na(bank_data))
bank_data$response.numeric <- ifelse(bank_data$response == "yes", 1, 0)
agg_age <- aggregate(response.numeric ~ buckets.age, data = bank_data, mean)
bank_data$buckets.salary <- cut(bank_data$salary, breaks = 10)
agg_salary <- aggregate(response.numeric ~ buckets.salary, data = bank_data, mean)
agg_salary
ggplot(agg_salary, aes(x = buckets.salary, y = response.numeric)) + geom_bar(stat = 'identity')
agg_job <- aggregate(response.numeric~job, data = bank_data, mean)
agg_job
ggplot(agg_job, aes(job, response.numeric)) + geom_bar(stat = 'identity')
library(caret)
library(caTools)
library(dummies)
bank_data <- bank_data[, -c(20, 21, 22)]
str(bank_data)
bank_data$response <- as.integer(bank_data$response)
str(bank_data)
bank_data <- read.csv("bank-marketing.csv")
library(caret)
library(caTools)
library(dummies)
str(bank_data)
head(bank_data$response)
bank_data <- dummy.data.frame(bank_data)
str(bank_data)
bank_data <- read.csv("bank-marketing.csv")
bank_data$response <- as.integer(bank_data$response)
bank_data <- dummy.data.frame(bank_data)
bank_data$response <- as.factor(bank_data$response)
str(bank_data)
head(bank_data$response)
summary(bank_data$response)
bank_data$response <- as.factor(ifelse(bank_data$response == 1, "no", "yes"))
summary(bank_data$response)
set.seed(1)
split_indices <- sample.split(bank_data$response, SplitRatio = 0.70)
train <- bank_data[split_indices, ]
test <- bank_data[!split_indices, ]
nrow(train)/nrow(bank_data)
nrow(test)/nrow(bank_data)
library(MASS)
library(car)
logistic_1 <- glm(response ~ ., family = "binomial", data = train)
summary(logistic_1)
logistic_7 <- glm(formula = response ~ jobadmin. +
jobretired + jobstudent + maritalmarried +
educationprimary + educationsecondary + balance + housingno +
loanno + contactcellular + contacttelephone + day +
monthaug + monthjan + monthjul + monthjun + monthmar +
+ monthnov + duration + campaign  +
poutcomesuccess, family = "binomial", data = train)
summary(logistic_7)
vif(logistic_7)
logistic_final <- logistic_7
predictions_logit <- predict(logistic_final, newdata = test[, -55], type = "response")
summary(predictions_logit)
vec <- c(4, 5, 6)
vec <- vec[-2]
vec
summary(predictions_logit)
predicted_response <- factor(ifelse(predictions_logit >= 0.50, "yes", "no"))
conf <- confusionMatrix(predicted_response, test$response, positive = "yes")
conf
sensitivity <- conf$byClass[1]
specificity <- conf$byClass[2]
sensitivity
specificity
library(ROCR)
predictions_object <- prediction(predictions_logit, test$response)
perf_object <- performance(predictions_object, "tpr", "fpr")
plot(perf_object)
perform_fn <- function(cutoff)
{
predicted_response <- factor(ifelse(predictions_logit >= cutoff, "yes", "no"))
conf <- confusionMatrix(predicted_response, test$response, positive = "yes")
acc <- conf$overall[1]
sens <- conf$byClass[1]
spec <- conf$byClass[2]
out <- t(as.matrix(c(sens, spec, acc)))
colnames(out) <- c("sensitivity", "specificity", "accuracy")
return(out)
}
# creating cutoff values from 0.01 to 0.99 for plotting and initialising a matrix of size 1000x4
s = seq(.01,.99,length=100)
OUT = matrix(0,100,3)
# calculate the sens, spec and acc for different cutoff values
for(i in 1:100)
{
OUT[i,] = perform_fn(s[i])
}
# plotting cutoffs
plot(s, OUT[,1],xlab="Cutoff",ylab="Value",cex.lab=1.5,cex.axis=1.5,ylim=c(0,1),type="l",lwd=2,axes=FALSE,col=2)
axis(1,seq(0,1,length=5),seq(0,1,length=5),cex.lab=1.5)
axis(2,seq(0,1,length=5),seq(0,1,length=5),cex.lab=1.5)
lines(s,OUT[,2],col="darkgreen",lwd=2)
lines(s,OUT[,3],col=4,lwd=2)
box()
legend(0,.50,col=c(2,"darkgreen",4,"darkred"),lwd=c(2,2,2,2),c("Sensitivity","Specificity","Accuracy"))
cutoffs <- s[which(abs(OUT[, 1] - OUT[, 2]) < 0.01)]
cutoffs
predicted_response <- factor(ifelse(predictions_logit >= 0.12, "yes", "no"))
conf_final <- confusionMatrix(predicted_response, test$response, positive = "yes")
acc <- conf_final$overall[1]
sens <- conf_final$byClass[1]
spec <- conf_final$byClass[2]
acc
sens
spec
test$predicted_probs <- predictions_logit
test$predicted_response <- predicted_response
str(test)
test_predictions <- test[, c("response", "predicted_probs", "predicted_response")]
head(test_predictions)
write.csv(test_predictions, file = "response_predictions.csv")
summary(test_predictions$response)
1587/13564
13564/1587
test_predictions <- test_predictions[order(test_predictions$predicted_probs, decreasing = T), ]
head(test_predictions)
summary(test_predictions$response[1:6800])
1537/6800
6800/1537
seq_prospects <- seq(1, 5000, by = 1)
cost_matrix <- matrix(0, length(seq_prospects), 3)
for (i in seq_prospects)
{
cost_matrix[i, 1] = i
response <- length(which(test_predictions$response[1:i] == "yes"))
cost_matrix[i, 2] = response/i
cost_matrix[i, 3] = response
}
colnames(cost_matrix) <- c("number of prospects targeted (marketing cost)", "response rate", "number of responses")
head(cost_matrix)
plot(cost_matrix[, 1], cost_matrix[,2]*100,xlab="Marketing Cost (INR)",ylab="Response Rate (%)",cex.lab=1.5,cex.axis=1.5, ylim=c(0,200),type="l",lwd=2,axes=TRUE,col=2)
lines(seq_prospects, cost_matrix[, 3]/10, col="darkgreen",lwd=2)
box()
legend(0, 200,col=c(2,"darkgreen"),lwd=c(2,2),c("Response Rate","No.of Responses/10"))
cost_matrix[3000:3010, ]
1237/1587
3000/13500
summary(test_predictions$response)
test_predictions <- test_predictions[order(test_predictions$predicted_probs, decreasing = T), ]
head(test_predictions)
summary(test_predictions$response[1:6800])
1512/6800
6800/1512
seq_prospects <- seq(1, 5000, by = 1)
cost_matrix <- matrix(0, length(seq_prospects), 3)
for (i in seq_prospects)
{
cost_matrix[i, 1] = i
response <- length(which(test_predictions$response[1:i] == "yes"))
cost_matrix[i, 2] = response/i
cost_matrix[i, 3] = response
}
colnames(cost_matrix) <- c("number of prospects targeted (marketing cost)", "response rate", "number of responses")
head(cost_matrix)
plot(cost_matrix[, 1], cost_matrix[,2]*100,xlab="Marketing Cost (INR)",ylab="Response Rate (%)",cex.lab=1.5,cex.axis=1.5, ylim=c(0,200),type="l",lwd=2,axes=TRUE,col=2)
lines(seq_prospects, cost_matrix[, 3]/10, col="darkgreen",lwd=2)
box()
legend(0, 200,col=c(2,"darkgreen"),lwd=c(2,2),c("Response Rate","No.of Responses/10"))
cost_matrix[3000:3010, ]
1272/1587
3000/13500
logistic_8 <- glm(formula = response ~ jobadmin. +
jobretired + jobstudent + maritalmarried +
educationprimary + educationsecondary + balance + housingno +
loanno + day +
duration + campaign  +
poutcomesuccess, family = "binomial", data = train)
logistic_final <- logistic_8
predictions_logit <- predict(logistic_final, newdata = test[, -55], type = "response")
summary(predictions_logit)
predicted_response <- factor(ifelse(predictions_logit >= 0.50, "yes", "no"))
conf <- confusionMatrix(predicted_response, test$response, positive = "yes")
conf
sensitivity <- conf$byClass[1]
specificity <- conf$byClass[2]
sensitivity
specificity
31.75*1100/100
library(ROCR)
predictions_object <- prediction(predictions_logit, test$response)
perf_object <- performance(predictions_object, "tpr", "fpr")
plot(perf_object)
perform_fn <- function(cutoff)
{
predicted_response <- factor(ifelse(predictions_logit >= cutoff, "yes", "no"))
conf <- confusionMatrix(predicted_response, test$response, positive = "yes")
acc <- conf$overall[1]
sens <- conf$byClass[1]
spec <- conf$byClass[2]
out <- t(as.matrix(c(sens, spec, acc)))
colnames(out) <- c("sensitivity", "specificity", "accuracy")
return(out)
}
# creating cutoff values from 0.01 to 0.99 for plotting and initialising a matrix of size 1000x4
s = seq(.01,.99,length=100)
OUT = matrix(0,100,3)
# calculate the sens, spec and acc for different cutoff values
for(i in 1:100)
{
OUT[i,] = perform_fn(s[i])
}
# plotting cutoffs
plot(s, OUT[,1],xlab="Cutoff",ylab="Value",cex.lab=1.5,cex.axis=1.5,ylim=c(0,1),type="l",lwd=2,axes=FALSE,col=2)
axis(1,seq(0,1,length=5),seq(0,1,length=5),cex.lab=1.5)
axis(2,seq(0,1,length=5),seq(0,1,length=5),cex.lab=1.5)
lines(s,OUT[,2],col="darkgreen",lwd=2)
lines(s,OUT[,3],col=4,lwd=2)
box()
legend(0,.50,col=c(2,"darkgreen",4,"darkred"),lwd=c(2,2,2,2),c("Sensitivity","Specificity","Accuracy"))
cutoffs <- s[which(abs(OUT[, 1] - OUT[, 2]) < 0.01)]
cutoffs
predicted_response <- factor(ifelse(predictions_logit >= 0.12, "yes", "no"))
conf_final <- confusionMatrix(predicted_response, test$response, positive = "yes")
acc <- conf_final$overall[1]
sens <- conf_final$byClass[1]
spec <- conf_final$byClass[2]
acc
sens
spec
1100*0.75
test$predicted_probs <- predictions_logit
test$predicted_response <- predicted_response
str(test)
test_predictions <- test[, c("response", "predicted_probs", "predicted_response")]
head(test_predictions)
write.csv(test_predictions, file = "response_predictions.csv")
summary(test_predictions$response)
test_predictions <- test_predictions[order(test_predictions$predicted_probs, decreasing = T), ]
head(test_predictions)
summary(test_predictions$response[1:6800])
1479/6800
6800/1479
seq_prospects <- seq(1, 5000, by = 1)
cost_matrix <- matrix(0, length(seq_prospects), 3)
for (i in seq_prospects)
{
cost_matrix[i, 1] = i
response <- length(which(test_predictions$response[1:i] == "yes"))
cost_matrix[i, 2] = response/i
cost_matrix[i, 3] = response
}
colnames(cost_matrix) <- c("number of prospects targeted (marketing cost)", "response rate", "number of responses")
head(cost_matrix)
plot(cost_matrix[, 1], cost_matrix[,2]*100,xlab="Marketing Cost (INR)",ylab="Response Rate (%)",cex.lab=1.5,cex.axis=1.5, ylim=c(0,200),type="l",lwd=2,axes=TRUE,col=2)
lines(seq_prospects, cost_matrix[, 3]/10, col="darkgreen",lwd=2)
box()
legend(0, 200,col=c(2,"darkgreen"),lwd=c(2,2),c("Response Rate","No.of Responses/10"))
cost_matrix[3000:3010, ]
1167/1587
3000/13500
